Rest API
C -> Create -> post method -> body
R -> Read -> get method -> no body
U -> update -> put method -> body
D -> delete -> delete method -> body or no body

Sign In -> 


Design:
sign-in page -> Todos page  ----> other route --> page-not-found page

Todos page:
main component - Todos component 
                        - Todo-list-header (input for user to enter a todo)
                        - Todo-list (display list of todos)
                            - todo-list-item ( todo )
                        - todo-list-footer (items remaining)

todo-list-item - emit (update)-> todo-list - emit(update) -> todos component -> perform update

services :  todos component -> Todo data service -> api service -> make the Http calls to the server


input elements -> States -> Pristine, touched, Dirty
Reactive forms:
    1) create Formcontrolname
    2) assign formcntrol to formgroup (segregate your form elements)
    3) create formgroup instance in ts file. create individual form controls but better way is to use form Builder.
    4) inject formbuilder. get instance of formgroup from formbuilder which will generate your form controls.
    5) make formcontrols as required by setting validators.required.
    6) display error message by checking if the input fields are touched.