Rest API
C -> Create -> post method -> body
R -> Read -> get method -> no body
U -> update -> put method -> body
D -> delete -> delete method -> body or no body

Sign In -> 


Design:
sign-in page -> Todos page  ----> other route --> page-not-found page

Todos page:
main component - Todos component 
                        - Todo-list-header (input for user to enter a todo)
                        - Todo-list (display list of todos)
                            - todo-list-item ( todo )
                        - todo-list-footer (items remaining)

todo-list-item - emit (update)-> todo-list - emit(update) -> todos component -> perform update

services :  todos component -> Todo data service -> api service -> make the Http calls to the server


input elements -> States -> Pristine, touched, Dirty
Reactive forms:
    1) create Formcontrolname
    2) assign formcntrol to formgroup (segregate your form elements)
    3) create formgroup instance in ts file. create individual form controls but better way is to use form Builder.
    4) inject formbuilder. get instance of formgroup from formbuilder which will generate your form controls.
    5) make formcontrols as required by setting validators.required.
    6) display error message by checking if the input fields are touched.




Concepts:
Data Binding:
    Interpolation -> display data in html from typescript -> {{}}
    Event Binding -> for a binding to Method calls
    Two way data binding -> ngModel -> banana in a box

Forms -> Reactive forms 

RxJs -> Huge topic -> http (HttpClient) -> Observable -> subscribe method -> pipe() -> operators -> map() => filter data.

Router -> router paths

Route Guards -> Protecting your routes
Resovler -> Load data before showing the page

Component Interaction:
 Parent to child -> Inject data into child component and access in child using @Input()
 child to parent -> emit event from child using @output event emitter and access it in parent through event binding

create Todo Model -> using typescript file and defining the class

Pipe

Angular Material -> html & css